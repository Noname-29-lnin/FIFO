$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $scope module tb_fifo $end
   $var wire 32 < DATA_WIDTH [31:0] $end
   $var wire 32 < SIZE_DEPTH [31:0] $end
   $var wire 32 = ADDR_WIDTH [31:0] $end
   $var wire 1 8 i_clk $end
   $var wire 1 # i_rst_n $end
   $var wire 1 $ i_wr_en $end
   $var wire 1 % i_rd_en $end
   $var wire 8 & i_data [7:0] $end
   $var wire 8 1 o_data [7:0] $end
   $var wire 1 9 o_full $end
   $var wire 1 2 o_empty $end
   $var wire 3 > pt_wr [2:0] $end
   $var wire 3 ? pt_rd [2:0] $end
   $var wire 8 @ value_wr[0] [7:0] $end
   $var wire 8 A value_wr[1] [7:0] $end
   $var wire 8 B value_wr[2] [7:0] $end
   $var wire 8 C value_wr[3] [7:0] $end
   $var wire 8 D value_wr[4] [7:0] $end
   $var wire 8 E value_wr[5] [7:0] $end
   $var wire 8 F value_wr[6] [7:0] $end
   $var wire 8 G value_wr[7] [7:0] $end
   $var wire 8 ' value_rd[0] [7:0] $end
   $var wire 8 ( value_rd[1] [7:0] $end
   $var wire 8 ) value_rd[2] [7:0] $end
   $var wire 8 * value_rd[3] [7:0] $end
   $var wire 8 + value_rd[4] [7:0] $end
   $var wire 8 , value_rd[5] [7:0] $end
   $var wire 8 - value_rd[6] [7:0] $end
   $var wire 8 . value_rd[7] [7:0] $end
   $var wire 32 / count_wr [31:0] $end
   $var wire 32 0 count_rd [31:0] $end
   $var wire 32 H match_count [31:0] $end
   $scope module uut $end
    $var wire 32 < SIZE_DEPTH [31:0] $end
    $var wire 32 < SIZE_DATA [31:0] $end
    $var wire 1 8 i_clk $end
    $var wire 1 # i_rst_n $end
    $var wire 1 $ i_wr_en $end
    $var wire 1 % i_rd_en $end
    $var wire 8 & i_data [7:0] $end
    $var wire 8 1 o_data [7:0] $end
    $var wire 1 9 o_full $end
    $var wire 1 2 o_empty $end
    $var wire 32 = ADDR [31:0] $end
    $var wire 3 3 ptr_rd [2:0] $end
    $var wire 3 4 ptr_wr [2:0] $end
    $var wire 3 : n_ptr_rd [2:0] $end
    $var wire 3 ; n_ptr_wr [2:0] $end
    $scope module lut_mem $end
     $var wire 32 < SIZE_DATA [31:0] $end
     $var wire 32 = SIZE_ADDR [31:0] $end
     $var wire 1 8 i_clk $end
     $var wire 1 # i_rst_n $end
     $var wire 1 $ i_wr_en $end
     $var wire 1 % i_rd_en $end
     $var wire 3 4 i_wr_addr [2:0] $end
     $var wire 3 3 i_rd_addr [2:0] $end
     $var wire 8 & i_data [7:0] $end
     $var wire 8 1 o_data [7:0] $end
     $var wire 8 5 mem[0] [7:0] $end
     $var wire 8 6 mem[1] [7:0] $end
     $var wire 8 7 mem[2] [7:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
0%
b00000000 &
b00000000 '
b00000000 (
b00000000 )
b00000000 *
b00000000 +
b00000000 ,
b00000000 -
b00000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000 1
12
b000 3
b000 4
b00000000 5
b00000000 6
b00000000 7
08
19
b000 :
b000 ;
b00000000000000000000000000001000 <
b00000000000000000000000000000011 =
b000 >
b000 ?
b00000000 @
b00000000 A
b00000000 B
b00000000 C
b00000000 D
b00000000 E
b00000000 F
b00000000 G
b00000000000000000000000000000000 H
#5
18
#10
08
#15
1$
b00101001 &
18
#20
08
#25
1#
b00101001 5
18
#30
08
#35
0#
0$
1%
b00000000 5
18
#40
08
#45
1#
18
#50
08
#55
1$
0%
b11000100 &
b11000100 5
18
#60
08
#65
18
#70
08
#75
b10011100 &
b10011100 5
18
#80
08
#85
18
#90
08
#95
b00000010 &
b00000010 5
18
#100
08
#105
18
#110
08
#115
b11100100 &
b11100100 5
18
#120
08
#125
18
#130
08
#135
b01111000 &
b01111000 5
18
#140
08
#145
18
#150
08
#155
b10111100 &
b10111100 5
18
#160
08
#165
18
#170
08
#175
b10110110 &
b10110110 5
18
#180
08
#185
18
#190
08
#195
b11100100 &
b11100100 5
18
#200
08
#205
18
#210
08
#215
b10110111 &
b10110111 5
18
#220
08
#225
0$
18
#230
08
#235
1%
b10110111 1
18
#240
08
#245
b10110111 '
b00000000000000000000000000000001 0
18
#250
08
#255
18
#260
08
#265
b10110111 (
b00000000000000000000000000000010 0
18
#270
08
#275
18
#280
08
#285
b10110111 )
b00000000000000000000000000000011 0
18
#290
08
#295
18
#300
08
#305
b10110111 *
b00000000000000000000000000000100 0
18
#310
08
#315
18
#320
08
#325
b10110111 +
b00000000000000000000000000000101 0
18
#330
08
#335
18
#340
08
#345
b10110111 ,
b00000000000000000000000000000110 0
18
#350
08
#355
18
#360
08
#365
b10110111 -
b00000000000000000000000000000111 0
18
#370
08
#375
18
#380
08
#385
0%
b10110111 .
b00000000000000000000000000001000 0
18
#390
08
#395
18
#400
08
#405
0#
b00000000 1
b00000000 5
18
#410
08
#415
18
#420
08
#425
1#
18
#430
08
#435
18
#440
08
#445
1$
b00011101 &
b00011101 5
18
#450
08
#455
1%
b00011110 &
b00011110 5
18
#460
08
#465
b00011111 &
b00011111 5
18
#470
08
#475
0$
b00100000 &
b00011111 1
18
#480
08
#485
b00100001 &
18
#490
08
#495
18
#500
08
#505
18
#510
08
#515
18
#520
08
#525
18
#530
08
#535
18
#540
08
#545
18
#550
08
#555
18
#560
08
#565
18
#570
08
#575
18
#580
08
#585
18
#590
08
#595
18
#600
08
#605
18
#610
08
#615
18
#620
08
#625
18
#630
08
#635
18
#640
08
#645
18
#650
08
#655
18
#660
08
#665
18
#670
08
#675
18
#680
08
#685
18
